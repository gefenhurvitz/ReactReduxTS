import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import Student from '../../models/Student';
import { addStudent, deleteStudent, getAllStudents } from './studentAPI';

export interface StudentState {
  value: number;
  status: 'idle' | 'loading' | 'failed';
  students: Student[]
}

const initialState: StudentState = {
  value: 0,
  status: 'idle',
  students: [ {age:3,sname:'gefen'}, {age:5,sname:'yam'} ]
};

export const addStudentAsync = createAsyncThunk(
  'student/addStudent',
  async (newStudent: Student) => {
    const response = await addStudent(newStudent);
    return response.data;
  }
);


export const getAllStudentsAsync = createAsyncThunk(
  'student/getAllStudents',
  async () => {
    const response = await getAllStudents();
    return response.data;
  }
);

export const deleteStudentAsync = createAsyncThunk(
  'student/deleteStudent',
  async (id:number) => {
    const response = await deleteStudent(id);
    return response.data;
    console.log(`delete student ${id}`)
  }
);


export const studentSlice = createSlice({
  name: 'student',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addStudentAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addStudentAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        console.log(action.payload)
        state.students.push(action.payload)
      })
      .addCase(addStudentAsync.rejected, (state) => {
        state.status = 'failed';
      })
      .addCase(getAllStudentsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        console.log(action.payload)
        state.students = action.payload
      })
      .addCase(deleteStudentAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        console.log(action.payload)
        state.students = state.students.filter(stu => stu.id !== action.payload)
      })
      
  },
});

export const { increment, decrement, incrementByAmount } = studentSlice.actions;

export const selectStudent = (state: RootState) => state.student.students;


export default studentSlice.reducer;
